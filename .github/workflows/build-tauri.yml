name: Build Tauri App

on:
  push:
    tags:
      - 'v*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'ubuntu-20.04'
            args: '--target x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'
          - platform: 'macos-latest'
            args: '--target x86_64-apple-darwin'
          - platform: 'macos-latest'
            args: '--target aarch64-apple-darwin'

    runs-on: ${{ matrix.platform }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies (Ubuntu)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt update
          sudo apt install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'npm'

      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install Node.js dependencies
        run: npm ci

      - name: Build the app
        run: npm run tauri:build -- ${{ matrix.args }}

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: tauri-app-${{ matrix.platform }}-${{ strategy.job-index }}
          path: |
            src-tauri/target/*/release/bundle/
            !src-tauri/target/*/release/bundle/**/DEBIAN/
            !src-tauri/target/*/release/bundle/**/data/

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    permissions:
      contents: write
    
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Display structure of downloaded files
        run: ls -la artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/**/*.deb
            artifacts/**/*.rpm
            artifacts/**/*.AppImage
            artifacts/**/*.dmg
            artifacts/**/*.msi
            artifacts/**/*.exe
          body: |
            ## 🚀 API Proxy v${{ github.ref_name }}
            
            ### 📦 桌面应用下载
            
            **Linux:**
            - Debian/Ubuntu: `.deb` 包
            - Red Hat/CentOS: `.rpm` 包
            - AppImage: 通用格式
            
            **Windows:**
            - MSI 安装包（推荐）
            - NSIS 安装包
            
            **macOS:**
            - DMG 镜像文件
            
            ### 🔧 安装说明
            
            1. 下载适合您系统的安装包
            2. 双击安装或使用包管理器安装
            3. 启动 API Proxy 应用
            4. 在管理界面中配置您的 API 密钥
            
            ### ✨ 新特性
            
            - Tauri 跨平台桌面应用
            - 轻量化打包（相比 Electron 减少 80% 体积）
            - 自动启动和管理 Node.js 后端服务
            - 实时服务器状态监控
            
            ### 📚 文档
            
            - [构建指南](docs/TAURI_BUILD_GUIDE.md)
            - [API 文档](docs/UNIFIED_API.md)
            - [贡献指南](CONTRIBUTING.md)
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}